package count;

import java.io.IOException;
import java.util.Map.Entry;
import java.util.Spliterator;
import java.util.StringTokenizer;
import java.util.function.Consumer;

import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;

public class GetPriorP extends Configuration implements Tool{
	public static class DocMap extends Mapper<Object,Text,Text,IntWritable>{
		private Text text=new Text();
		public void map(Object key,Text value,Context context) throws IOException,InterruptedException{
			StringTokenizer st=new StringTokenizer(value.toString());
			Text ikey=new Text(st.nextToken());
			IntWritable ivalue=new IntWritable(Integer.parseInt(st.nextToken()));
			context.write(new Text("total"),ivalue);
		}
		
	}
	public static class DocReduce extends Reducer<Text ,IntWritable,Text,IntWritable>{
		public final static IntWritable one=new IntWritable(1);
		
		public void reduce(Text key,Iterable<IntWritable> values,Context context) throws IOException,InterruptedException{
			IntWritable  sum=new IntWritable(0);
			for(IntWritable val:values){
				sum.set(val.get()+sum.get());
			}
			context.write(new Text("total"),sum);
		}
	}
	public static void main(String[] args) throws Exception{
		int res=ToolRunner.run(new Configuration(), new GetPriorP(),args);
		System.exit(res);
		
	}
	public Configuration getConf() {
		// TODO Auto-generated method stub
		return null;
	}
	public void setConf(Configuration arg0) {
		// TODO Auto-generated method stub
		
	}
	public void forEach(Consumer<? super Entry<String, String>> action) {
		// TODO Auto-generated method stub
		
	}
	public Spliterator<Entry<String, String>> spliterator() {
		// TODO Auto-generated method stub
		return null;
	}
	public int run(String[] args) throws Exception {
		// TODO Auto-generated method stub
		Configuration conf=new Configuration();
		conf.set("mapreduce.input.fileinputformat.input.dir.recursive","true");
		Path outputPath=new Path(args[1]);
		outputPath.getFileSystem(conf).delete(outputPath,true);
		Job job=Job.getInstance(conf,"getCondP");
		job.setJarByClass(GetProbability.class);
		job.setMapperClass(DocMap.class);
		job.setCombinerClass(DocReduce.class);
		job.setReducerClass(DocReduce.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		
		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job,new Path(args[1]));
		System.exit(job.waitForCompletion(true)?  0:1);
		return 0;
	}
}
	

